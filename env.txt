DJANGO_SECRET_KEY=xyz
# NOTE: make sure to use quotes around secret key, so the special characters are correctly interpreted

DB_ROOT_PASSWORD=xyz
DB_NAME=xyz
DB_USER=xyz
DB_PASSWORD=xyz

# REFERENCE DATA
# Superuser Username: *use DB_USER value*
# Superuser Email: [DB_USER]@super.com
# Superuser Password: *use DB_PASSWORD value*


ERROR_ALERT_FROM_EMAIL=abc@xyz.com
ERROR_ALERT_TO_EMAIL=abc@xyz.com
ERROR_ALERT_EMAIL_PASSWORD=password123
ERROR_ALERT_EMAIL_SMTP_SERVER=smtp.xyz.com
ERROR_ALERT_EMAIL_SMTP_PORT=XXX

# NOTE: the error alert email data is for the automated run-app.bat script and backup-database.bat script in scripts folder, so that the user is notified if there is a critical error in either script

# Instructions for Filling in Values:

# To get a new DJANGO_SECRET_KEY:
    # Make sure you are in a virtual env where Python is installed
    # Open a Python shell by just typing python in your PowerShell prompt.
    # Run the following Python commands:
        # from django.core.management.utils import get_random_secret_key
        # print(get_random_secret_key())
    # Restart the Django server to apply these changess

# To create the Database Credentials (only needed for Production / using MySQL - not needed for Development/SQLite):
    # Replace the 'xyz' placeholders above to your desired values 
    # If in Production Mode (using MySQL):
        # Open the terminal and navigate to the project's root directory
        # Start the Docker container - run: docker-compose up -d db
        # Access MySQL Shell in Docker -run: docker exec -it production-planner-db-1 bash 
        # Log into MySQL with the root user - run: mysql -u root -p
            # Password = [DB_PASSWORD] (whatever you set earlier)
        # Run the following commands (using the values you set in place of 'xyz' above): 
            # CREATE DATABASE your_database;
            # CREATE USER 'your_user'@'%' IDENTIFIED BY 'your_password';
            # GRANT ALL PRIVILEGES ON your_database.* TO 'your_user'@'%';
            # FLUSH PRIVILEGES;
        # Exit bash/mysql in the terminal:
            # Exit mysql - run: Exit;
            # Exit bash - run: exit
        # Restart any services that need to connect to the database to ensure they use the new credentials (i.e. Docker)

